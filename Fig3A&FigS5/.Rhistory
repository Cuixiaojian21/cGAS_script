k50 <- readRDS("H:/2_1_all_scHi-C/1_2_collection_data/2023_Science_Lifelong/1_3_Supplementary_file/tmp/k50.rds")
install.packages("rliger")
k50 <- readRDS("H:/2_1_all_scHi-C/1_2_collection_data/2023_Science_Lifelong/1_3_Supplementary_file/tmp/k50.rds")
object <- convertOldLiger(object)
object <- convertOldLiger(readRDS("H:/2_1_all_scHi-C/1_2_collection_data/2023_Science_Lifelong/1_3_Supplementary_file/tmp/k50.rds"))
BiocManager::install("clusterProfiler")
install.packages("D:/0_1_software_package/R包/clusterProfiler_4.12.0.zip", repos = NULL, type = "win.binary")
library(clusterProfiler)
install('AnnotationDbi')
BiocManager::install("AnnotationDbi")
install.packages("D:/0_1_software_package/R包/AnnotationDbi_1.66.0.zip", repos = NULL, type = "win.binary")
library(clusterProfiler)
install.packages("D:/0_1_software_package/R包/Biostrings_2.72.1.zip", repos = NULL, type = "win.binary")
library(clusterProfiler)
install.packages("D:/0_1_software_package/R包/DOSE_3.30.1.zip", repos = NULL, type = "win.binary")
library(clusterProfiler)
install.packages("D:/0_1_software_package/R包/downloader_0.4.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/enrichplot_1.24.0.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/GOSemSim_2.30.0.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/gson_0.1.0.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/httr_1.4.7.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/igraph_2.0.3.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/magrittr_2.0.3.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/plyr_1.8.9.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/qvalue_2.36.0.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/rlang_1.1.4.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/tidyr_1.3.1.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/yulab.utils_0.1.4.zip", repos = NULL, type = "win.binary")
library(clusterProfiler)
install.packages("D:/0_1_software_package/R包/GO.db_3.19.1.tar.gz", repos = NULL, type = "source")
library(clusterProfiler)
install.packages("D:/0_1_software_package/R包/HDO.db_0.99.1.tar.gz", repos = NULL, type = "source")
library(clusterProfiler)
install.packages("D:/0_1_software_package/R包/fgsea_1.30.0.zip", repos = NULL, type = "win.binary")
library(clusterProfiler)
install.packages("D:/0_1_software_package/R包/GenomicFeatures_1.56.0.zip", repos = NULL, type = "win.binary")
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
install.packages("D:/0_1_software_package/R包/TxDb.Hsapiens.UCSC.hg19.knownGene_3.2.2.tar.gz", repos = NULL, type = "source")
library(clusterProfiler)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
library(org.Hs.eg.db)
install.packages("D:/0_1_software_package/R包/IRanges_2.38.0.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/TxDb.Hsapiens.UCSC.hg19.knownGene_3.2.2.tar.gz", repos = NULL, type = "source")
install.packages("D:/0_1_software_package/R包/TxDb.Hsapiens.UCSC.hg19.knownGene_3.2.2.tar.gz", repos = NULL, type = "source")
library(IRanges)
install.packages("D:/0_1_software_package/R包/TxDb.Hsapiens.UCSC.hg19.knownGene_3.2.2.tar.gz", repos = NULL, type = "source")
remove.packages("IRanges")
install.packages("D:/0_1_software_package/R包/IRanges_2.38.0.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/IRanges_2.38.0.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/TxDb.Hsapiens.UCSC.hg19.knownGene_3.2.2.tar.gz", repos = NULL, type = "source")
library(GenomicRanges)
detach("package:GenomicRanges", unload = TRUE)
remove.packages("GenomicRanges")
install.packages("D:/0_1_software_package/R包/GenomicRanges_1.56.0.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/GenomicRanges_1.56.0.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/TxDb.Hsapiens.UCSC.hg19.knownGene_3.2.2.tar.gz", repos = NULL, type = "source")
install.packages("D:/0_1_software_package/R包/rtracklayer_1.64.0.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/TxDb.Hsapiens.UCSC.hg19.knownGene_3.2.2.tar.gz", repos = NULL, type = "source")
install.packages("D:/0_1_software_package/R包/BiocIO_1.14.0.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/BiocIO_1.14.0.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/TxDb.Hsapiens.UCSC.hg19.knownGene_3.2.2.tar.gz", repos = NULL, type = "source")
install.packages("D:/0_1_software_package/R包/Rsamtools_2.20.0.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/TxDb.Hsapiens.UCSC.hg19.knownGene_3.2.2.tar.gz", repos = NULL, type = "source")
install.packages("D:/0_1_software_package/R包/GenomicAlignments_1.40.0.zip", repos = NULL, type = "win.binary")
install.packages("D:/0_1_software_package/R包/TxDb.Hsapiens.UCSC.hg19.knownGene_3.2.2.tar.gz", repos = NULL, type = "source")
library(this.path)
setwd(this.path::this.dir())
#setwd('D:/1_1_Work_Path/1_1_YuanLin/1_1_cGAS/8_5_cGAS_6/F2D')
library(clusterProfiler)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(org.Hs.eg.db)
install.packages("D:/0_1_software_package/R包/org.Hs.eg.db_3.19.1.tar.gz", repos = NULL, type = "source")
library(org.Hs.eg.db)
library(ggplot2)
library(stringr)
library(ChIPseeker)
install.packages("D:/0_1_software_package/R包/ChIPseeker_1.40.0.zip", repos = NULL, type = "win.binary")
library(ChIPseeker)
library(ggpubr)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
sample_lab = "2_1_genelist.promoter"
gene_list_file <- paste0(sample_lab,".tsv")
ego_out_file <- paste0("3_1_ego_", sample_lab, ".tsv")
kegg_out_file <- paste0("4_1_kegg_", sample_lab, ".tsv")
ego_out_pdf <- paste0("3_1_ego_", sample_lab, ".pdf")
kegg_out_pdf <- paste0("4_1_kegg_", sample_lab, ".pdf")
data = read.csv(gene_list_file, sep='\t')
gene = data$geneId
kegg <- enrichKEGG(
gene = gene,
keyType = 'kegg',
organism = 'human',
pvalueCutoff = 0.05,
)
View(kegg)
library(this.path)
setwd(this.path::this.dir())
#setwd('D:/1_1_Work_Path/8_5_cGAS_5/F2AS4BCD')
library(clusterProfiler)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(org.Hs.eg.db)
library(ggplot2)
library(stringr)
library(ggpubr)
library(ChIPseeker)
library(ChIPseeker)
data = read.csv('GeneId_nucleus_only.txt', sep='\t')
gene = data$Gene.ID
ego <- enrichGO(gene = gene,
keyType = "ENTREZID",
OrgDb = org.Hs.eg.db,
ont = "CC",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
p1 <- barplot(ego,color = (c("qvalue")))+
theme_bw()+ theme(panel.grid=element_blank())
p2 <- dotplot(ego,color = (c("qvalue")))+
theme_bw()+ theme(panel.grid=element_blank())
p5 <- ggpar(p1, font.y=c(8), font.tickslab=c(8), font.legend=c(8),legend = "right")
p5
p4 <- ggpar(p2, font.y=c(8), font.tickslab=c(8), font.legend=c(8),legend = "right")
p4
write.table(ego@result,
file = "nucleus_only_result.tsv",
sep = "\t",
row.names = F,col.names = T, quote = FALSE)
ego <- enrichGO(gene = gene,
keyType = "ENTREZID",
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
write.table(ego@result,
file = "nucleus_only_result.3kind.tsv",
sep = "\t",
row.names = F,col.names = T, quote = FALSE)
p2 <- barplot(ego, split="ONTOLOGY",
showCategory = 5,
color = (c("qvalue")))+facet_grid(ONTOLOGY~., scale="free")+
scale_y_discrete(labels = function(y) str_wrap(y, width = 50) )+ theme_bw()+theme(panel.grid=element_blank())+
theme(legend.position = "right")
p4 <- ggpar(p2, font.y=c(8), font.tickslab=c(8), font.legend=c(8),legend = "right")
p4
data = read.csv('GeneId_Cytoplasm_all.txt', sep='\t')
library(this.path)
setwd(this.path::this.dir())
#setwd('D:/1_1_Work_Path/8_5_cGAS_5/F2AS4BCD')
library(clusterProfiler)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(org.Hs.eg.db)
library(ggplot2)
library(stringr)
library(ggpubr)
library(ChIPseeker)
data = read.csv('GeneId_nucleus_only.txt', sep='\t')
gene = data$Gene.ID
ego <- enrichGO(gene = gene,
keyType = "ENTREZID",
OrgDb = org.Hs.eg.db,
ont = "CC",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
p1 <- barplot(ego,color = (c("qvalue")))+
theme_bw()+ theme(panel.grid=element_blank())
p2 <- dotplot(ego,color = (c("qvalue")))+
theme_bw()+ theme(panel.grid=element_blank())
p5 <- ggpar(p1, font.y=c(8), font.tickslab=c(8), font.legend=c(8),legend = "right")
p5
p4 <- ggpar(p2, font.y=c(8), font.tickslab=c(8), font.legend=c(8),legend = "right")
p4
write.table(ego@result,
file = "nucleus_only_result.tsv",
sep = "\t",
row.names = F,col.names = T, quote = FALSE)
ego <- enrichGO(gene = gene,
keyType = "ENTREZID",
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
write.table(ego@result,
file = "nucleus_only_result.3kind.tsv",
sep = "\t",
row.names = F,col.names = T, quote = FALSE)
p2 <- barplot(ego, split="ONTOLOGY",
showCategory = 5,
color = (c("qvalue")))+facet_grid(ONTOLOGY~., scale="free")+
scale_y_discrete(labels = function(y) str_wrap(y, width = 50) )+ theme_bw()+theme(panel.grid=element_blank())+
theme(legend.position = "right")
p4 <- ggpar(p2, font.y=c(8), font.tickslab=c(8), font.legend=c(8),legend = "right")
p4
library(this.path)
setwd(this.path::this.dir())
#setwd('D:/1_1_Work_Path/8_5_cGAS_5/F2AS4BCD')
library(clusterProfiler)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(org.Hs.eg.db)
library(ggplot2)
library(stringr)
library(ggpubr)
library(ChIPseeker)
data = read.csv('GeneId_nucleus_only.txt', sep='\t')
gene = data$Gene.ID
ego <- enrichGO(gene = gene,
keyType = "ENTREZID",
OrgDb = org.Hs.eg.db,
ont = "CC",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
p1 <- barplot(ego,color = (c("qvalue")))+
theme_bw()+ theme(panel.grid=element_blank())
p2 <- dotplot(ego,color = (c("qvalue")))+
theme_bw()+ theme(panel.grid=element_blank())
p5 <- ggpar(p1, font.y=c(8), font.tickslab=c(8), font.legend=c(8),legend = "right")
p5
p4 <- ggpar(p2, font.y=c(8), font.tickslab=c(8), font.legend=c(8),legend = "right")
p4
write.table(ego@result,
file = "nucleus_only_result.tsv",
sep = "\t",
row.names = F,col.names = T, quote = FALSE)
ego <- enrichGO(gene = gene,
keyType = "ENTREZID",
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
write.table(ego@result,
file = "nucleus_only_result.3kind.tsv",
sep = "\t",
row.names = F,col.names = T, quote = FALSE)
p2 <- barplot(ego, split="ONTOLOGY",
showCategory = 5,
color = (c("qvalue")))+facet_grid(ONTOLOGY~., scale="free")+
scale_y_discrete(labels = function(y) str_wrap(y, width = 50) )+ theme_bw()+theme(panel.grid=element_blank())+
theme(legend.position = "right")
p4 <- ggpar(p2, font.y=c(8), font.tickslab=c(8), font.legend=c(8),legend = "right")
p4
p5
p4
p5
library(this.path)
setwd(this.path::this.dir())
#setwd('D:/1_1_Work_Path/8_5_cGAS_5/F2AS4BCD')
library(clusterProfiler)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(org.Hs.eg.db)
library(ggplot2)
library(stringr)
library(ggpubr)
library(ChIPseeker)
data = read.csv('GeneId_nucleus_only.txt', sep='\t')
gene = data$Gene.ID
ego <- enrichGO(gene = gene,
keyType = "ENTREZID",
OrgDb = org.Hs.eg.db,
ont = "CC",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
p1 <- barplot(ego,color = (c("qvalue")))+
theme_bw()+ theme(panel.grid=element_blank())
p2 <- dotplot(ego,color = (c("qvalue")))+
theme_bw()+ theme(panel.grid=element_blank())
p1
p2
p5 <- ggpar(p1, font.y=c(8), font.tickslab=c(8), font.legend=c(8),legend = "right")
p5
p4 <- ggpar(p2, font.y=c(8), font.tickslab=c(8), font.legend=c(8),legend = "right")
p4
ego <- enrichGO(gene = gene,
keyType = "ENTREZID",
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
write.table(ego@result,
file = "nucleus_only_result.3kind.tsv",
sep = "\t",
row.names = F,col.names = T, quote = FALSE)
p2 <- barplot(ego, split="ONTOLOGY",
showCategory = 5,
color = (c("qvalue")))+facet_grid(ONTOLOGY~., scale="free")+
scale_y_discrete(labels = function(y) str_wrap(y, width = 50) )+ theme_bw()+theme(panel.grid=element_blank())+
theme(legend.position = "right")
p4 <- ggpar(p2, font.y=c(8), font.tickslab=c(8), font.legend=c(8),legend = "right")
p4
p5
p4
write.table(ego@result,
file = "nucleus_only_result.tsv",
sep = "\t",
row.names = F,col.names = T, quote = FALSE)
ego <- enrichGO(gene = gene,
keyType = "ENTREZID",
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
write.table(ego@result,
file = "nucleus_only_result.3kind.tsv",
sep = "\t",
row.names = F,col.names = T, quote = FALSE)
p2 <- barplot(ego, split="ONTOLOGY",
showCategory = 5,
color = (c("qvalue")))+facet_grid(ONTOLOGY~., scale="free")+
scale_y_discrete(labels = function(y) str_wrap(y, width = 50) )+ theme_bw()+theme(panel.grid=element_blank())+
theme(legend.position = "right")
p4 <- ggpar(p2, font.y=c(8), font.tickslab=c(8), font.legend=c(8),legend = "right")
p4
library(this.path)
setwd(this.path::this.dir())
#setwd('D:/1_1_Work_Path/8_5_cGAS_5/F2AS4BCD')
library(clusterProfiler)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(org.Hs.eg.db)
library(ggplot2)
library(stringr)
library(ggpubr)
library(ChIPseeker)
data = read.csv('GeneId_nucleus_only.txt', sep='\t')
gene = data$Gene.ID
ego <- enrichGO(gene = gene,
keyType = "ENTREZID",
OrgDb = org.Hs.eg.db,
ont = "CC",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
p1 <- barplot(ego,color = (c("qvalue")))+
theme_bw()+ theme(panel.grid=element_blank())
p2 <- dotplot(ego,color = (c("qvalue")))+
theme_bw()+ theme(panel.grid=element_blank())
p5 <- ggpar(p1, font.y=c(8), font.tickslab=c(8), font.legend=c(8),legend = "right")
#Figure 3 A
p5
p4 <- ggpar(p2, font.y=c(8), font.tickslab=c(8), font.legend=c(8),legend = "right")
#Figure S5 E
p4
write.table(ego@result,
file = "nucleus_only_result.tsv",
sep = "\t",
row.names = F,col.names = T, quote = FALSE)
ego <- enrichGO(gene = gene,
keyType = "ENTREZID",
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
write.table(ego@result,
file = "nucleus_only_result.3kind.tsv",
sep = "\t",
row.names = F,col.names = T, quote = FALSE)
p2 <- barplot(ego, split="ONTOLOGY",
showCategory = 5,
color = (c("qvalue")))+facet_grid(ONTOLOGY~., scale="free")+
scale_y_discrete(labels = function(y) str_wrap(y, width = 50) )+ theme_bw()+theme(panel.grid=element_blank())+
theme(legend.position = "right")
p4 <- ggpar(p2, font.y=c(8), font.tickslab=c(8), font.legend=c(8),legend = "right")
p4
data = read.csv('GeneId_Cytoplasm_all.txt', sep='\t')
data = read.csv('GeneId_Cytoplasm_all.txt', sep='\t')
gene = data$Gene.ID
ego <- enrichGO(gene = gene,
keyType = "ENTREZID",
OrgDb = org.Hs.eg.db,
ont = "ALL",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
write.table(ego@result,
file = "Cytoplasm_all_result.3kind.tsv",
sep = "\t",
row.names = F,col.names = T, quote = FALSE)
p2 <- barplot(ego, split="ONTOLOGY",
showCategory = 5,
color = (c("qvalue")))+facet_grid(ONTOLOGY~., scale="free")+
scale_y_discrete(labels = function(y) str_wrap(y, width = 50) )+ theme_bw()+theme(panel.grid=element_blank())+
theme(legend.position = "right")
p4 <- ggpar(p2, font.y=c(8), font.tickslab=c(8), font.legend=c(8),legend = "right")
p4
library(this.path)
setwd(this.path::this.dir())
library(ggpubr)
library(ggplot2)
library(stringr)
data = read.csv('1_2.log10.1_1.tsv', sep='\t')
data[data < 3] <- 3
data[data > 9] <- 9
hist(x=data$Abundance_811269,breaks = 12, xlim = c(3,9), xlab="control log10 value")
hist(x=data$Abundance_811270,breaks = 12, xlim = c(3,9), xlab="cytoplasm log10 value")
hist(x=data$Abundance_811271,breaks = 12, xlim = c(3,9), xlab="nucleus log10 value")
data = read.csv('1_2.log10.1_1.tsv', sep='\t')
x <- data$cytoplasm
h1 <- hist(x,breaks = 20, xlab="cytoplasm/control log10 value", xlim = c(-4,6))
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h1$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
y <- data$nucleus
h2 <- hist(y,breaks = 20, xlab="nucleus/control log10 value", xlim = c(-4,6))
xfit2<-seq(min(y),max(y),length=40)
yfit2<-dnorm(xfit2,mean=mean(y),sd=sd(y))
yfit2 <- yfit2*diff(h2$mids[1:2])*length(y)
lines(xfit2, yfit2, col="pink", lwd=2)
hist(y,breaks = 20, xlab="nucleus/control log10 value", xlim = c(-4,6), ylim = c(0,250))
lines(xfit, yfit, col="blue", lwd=2)
lines(xfit2, yfit2, col="pink", lwd=2)
lines(frequency(data$cytoplasm),lwd=2)
hist(x=data$nucleus,breaks = 12, xlab="nucleus/control log10 value")
lines(x)
library(this.path)
setwd(this.path::this.dir())
library(ggpubr)
library(ggplot2)
library(stringr)
data = read.csv('1_2.log10.1_1.tsv', sep='\t')
data[data < 3] <- 3
data[data > 9] <- 9
hist(x=data$Abundance_811269,breaks = 12, xlim = c(3,9), xlab="control log10 value")
hist(x=data$Abundance_811270,breaks = 12, xlim = c(3,9), xlab="cytoplasm log10 value")
hist(x=data$Abundance_811271,breaks = 12, xlim = c(3,9), xlab="nucleus log10 value")
data = read.csv('1_2.log10.1_1.tsv', sep='\t')
x <- data$cytoplasm
h1 <- hist(x,breaks = 20, xlab="cytoplasm/control log10 value", xlim = c(-4,6))
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h1$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
y <- data$nucleus
h2 <- hist(y,breaks = 20, xlab="nucleus/control log10 value", xlim = c(-4,6))
xfit2<-seq(min(y),max(y),length=40)
yfit2<-dnorm(xfit2,mean=mean(y),sd=sd(y))
yfit2 <- yfit2*diff(h2$mids[1:2])*length(y)
lines(xfit2, yfit2, col="pink", lwd=2)
hist(y,breaks = 20, xlab="nucleus/control log10 value", xlim = c(-4,6), ylim = c(0,250))
lines(xfit, yfit, col="blue", lwd=2)
lines(xfit2, yfit2, col="pink", lwd=2)
lines(frequency(data$cytoplasm),lwd=2)
hist(x=data$nucleus,breaks = 12, xlab="nucleus/control log10 value")
lines(x)
library(this.path)
setwd(this.path::this.dir())
library(ggpubr)
library(ggplot2)
library(stringr)
data = read.csv('1_2.log10.1_1.tsv', sep='\t')
data[data < 3] <- 3
data[data > 9] <- 9
hist(x=data$Abundance_811269,breaks = 12, xlim = c(3,9), xlab="control log10 value")
hist(x=data$Abundance_811270,breaks = 12, xlim = c(3,9), xlab="cytoplasm log10 value")
hist(x=data$Abundance_811271,breaks = 12, xlim = c(3,9), xlab="nucleus log10 value")
data = read.csv('1_2.log10.1_1.tsv', sep='\t')
x <- data$cytoplasm
h1 <- hist(x,breaks = 20, xlab="cytoplasm/control log10 value", xlim = c(-4,6))
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h1$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
y <- data$nucleus
h2 <- hist(y,breaks = 20, xlab="nucleus/control log10 value", xlim = c(-4,6))
xfit2<-seq(min(y),max(y),length=40)
yfit2<-dnorm(xfit2,mean=mean(y),sd=sd(y))
yfit2 <- yfit2*diff(h2$mids[1:2])*length(y)
lines(xfit2, yfit2, col="pink", lwd=2)
hist(y,breaks = 20, xlab="nucleus/control log10 value", xlim = c(-4,6), ylim = c(0,250))
lines(xfit, yfit, col="blue", lwd=2)
lines(xfit2, yfit2, col="pink", lwd=2)
lines(frequency(data$cytoplasm),lwd=2)
hist(x=data$nucleus,breaks = 12, xlab="nucleus/control log10 value")
lines(x)
